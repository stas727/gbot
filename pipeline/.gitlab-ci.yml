variables:
  TARGETARCH: amd64
  TARGETOS: linux
  REGISTRY: registry.gitlab.com
  APP: "gbot"
  CI_TOKEN: $CI_JOB_TOKEN
  TELE_TOKEN: $TELE_TOKEN
  REGISTRY_TOKEN: $REGISTRY_TOKEN
  REGISTRY_USERNAME: $REGISTRY_USERNAME
  FILE_PATH: helm/values.yaml
  GIT_DEPTH: "50"
  PROJECT_VERSION: "v1.0.0"
stages:
  - test
  - build-push
  - update-image-tag

test:
  stage: test
  image: golang:latest
  script:
    - go test -v
  tags:
    - docker

build-push:
  image: docker:git
  stage: build-push
  services:
    - docker:dind
  script:
    - echo AI_TOKEN=$AI_TOKEN >> .env
    - echo TELE_TOKEN=$TELE_TOKEN >> .env
    - export IMG_TAG=${CI_REGISTRY_IMAGE}:$PROJECT_VERSION-$CI_COMMIT_SHORT_SHA
    - echo "TAG=$PROJECT_VERSION-$CI_COMMIT_SHORT_SHA" >> build.env
    - docker build --platform $TARGETOS/$TARGETARCH -t $IMG_TAG .
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker push $IMG_TAG
    - docker logout $CI_REGISTRY
  artifacts:
    reports:
      dotenv: build.env

update-image-tag:
  stage: update-image-tag
  image: stas727/ubuntu-yq-git:latest
  before_script:
    - git remote set-url origin "https://$REPO_TOKEN_NAME:$REPO_ACCESS_TOKEN@gitlab.com/stas727/gbot.git"
    - git config --global user.email "ci@gitlab.com"
    - git config --global user.name "GitLab CI"
    - git fetch
    - git switch main
    - git reset --hard origin/main
  script:
    - imgTag=$TAG targetArch=$TARGETARCH targetOs=$TARGETOS registryVal=$REGISTRY yq -i e '.image.tag=strenv(imgTag) | .image.arch=strenv(targetArch) | .image.os=strenv(targetOs) | .image.registry=strenv(registryVal)' helm/values.yaml
    - git add $FILE_PATH
    - git commit -m "CI Deploy to $VERSION"
    - git push -o ci.skip origin HEAD:main
  dependencies:
    - build-push

